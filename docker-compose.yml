name: SmartEye

# *******************************************************************
# * Author: 2024 Luigi Pizzolito (@https://github.com/Luigi-Pizzolito)
# *******************************************************************

# Docker Compose file for SmartEye system
# defines all the Docker containers for each module/service
# as well as virtual networks, ports, configuration,
# cross-dependencies, storage volumes, etc

# ! REFRAIN FROM EDITING DIRECTLY unless you know what you are doing
#  Instead, edit the environment configuration file: <filename>
#  TODO: Add environment file, compose parsing, docs

# Define virtual networks
networks:
  kafka-net:
    driver: bridge

# Define persistent storage volumes
volumes:
  kafka_data:

# Define services and their properties
services:
  # Apache Kafka + KRaft Manager
  # Handles asynchronous publisher/subscriber message channels in real-time
  # and provides disk store (DB) of all historical messages
  kafka:
    image: 'bitnami/kafka:latest'
    networks:
      - kafka-net
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    # persistent kafka storage, may also be directory mapped
    # volumes:
    #   - kafka_data:/bitnami/kafka
    # expose to localhost for testing
    # ports:
    #   - 9094:9094

  # ESP32CAM -> Kafka
  # Create one instance for each camera
  videobuffer0:
    build:
      context: ./ESP32CAM-VideoBuffer
      dockerfile: ../ESP32CAM-VideoBuffer.Dockerfile
    networks:
      - kafka-net
    depends_on:
      - kafka
    restart: unless-stopped
    # deploy:
    #   restart_policy:
    #     condition: on-failure
    #     delay: 5s
    #     window: 30s

  # Kafka -> HTTP MJPEG Streaming server
  # Single instance handles all streams, multi-client
  # Be sure to set framestreams to the proper filters
  # to select which Kafka topics to process as streams
  mjpegstreamer:
    build:
      context: ./MJPEGStreamer
      dockerfile: ../MJPEGStreamer.Dockerfile
    networks:
      - kafka-net
    ports:
      - 8095:8095
    depends_on:
      - kafka
      - videobuffer0
    restart: unless-stopped

  # Testing Python Kafka Consumer
  # pythonconsumer:
  #   build:
  #     context: ./test-pythonImageConsumer
  #     dockerfile: ../testPythonImageConsumer.Dockerfile
  #   networks:
  #     - kafka-net
  #   depends_on:
  #     - kafka
  #   volumes:
  #     - ./img:/app/img