name: SmartEye

networks:
  kafka-net:
    driver: bridge

volumes:
  kafka_data:

services:

  kafka:
    image: 'bitnami/kafka:latest'
    networks:
      - kafka-net
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    # persistent kafka storage, may also be directory mapped
    # volumes:
    #   - kafka_data:/bitnami/kafka
    # expose to localhost for testing
    ports:
      - 9094:9094

  videobuffer0:
    build:
      context: ./ESP32CAM-VideoBuffer
      dockerfile: ../ESP32CAM-VideoBuffer.Dockerfile
    networks:
      - kafka-net
    depends_on:
      - kafka
    restart: unless-stopped
    # deploy:
    #   restart_policy:
    #     condition: on-failure
    #     delay: 5s
    #     window: 30s

  mjpegstreamer:
    build:
      context: ./MJPEGStreamer
      dockerfile: ../MJPEGStreamer.Dockerfile
    networks:
      - kafka-net
    ports:
      - 8095:8095
    depends_on:
      - kafka
      - videobuffer0

  # pythonconsumer:
  #   build:
  #     context: ./test-pythonImageConsumer
  #     dockerfile: ../testPythonImageConsumer.Dockerfile
  #   networks:
  #     - kafka-net
  #   depends_on:
  #     - kafka
  #   volumes:
  #     - ./img:/app/img